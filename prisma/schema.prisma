generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  name      String?
  image     String?
  bio       String?
  username  String    @unique
  posts     Post[]
  comments  Comment[]
  wallet    Wallet?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  verified      Boolean @default(false)
  banned        Boolean @default(false)
  publicProfile Boolean @default(true)
  allowDMs      Boolean @default(true)
  allowTagging  Boolean @default(true)
  flagged       Boolean @default(false)

  notifications Notification[]
}

model Post {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  mediaUrl     String?
  hashtags     String[]
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String     @db.ObjectId
  likes        String[] // user IDs
  comments     Comment[]
  boosted      Boolean    @default(false)
  analytics    Analytics?
  draft        Boolean    @default(false)
  scheduledFor DateTime?
  published    Boolean    @default(true)
  createdAt    DateTime   @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Wallet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  balance Int    @default(0)
  history Json[]
}

model Analytics {
  postId String @id @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  views  Int    @default(0)
  clicks Int    @default(0)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId // recipient
  user      User     @relation(fields: [userId], references: [id])
  type      String // like | comment | boost
  actorId   String   @db.ObjectId // who triggered it
  postId    String?  @db.ObjectId
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
