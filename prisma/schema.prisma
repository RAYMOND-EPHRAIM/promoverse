generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  walletBalance Float     @default(0)
  cosmicPoints  Int       @default(0)
  cosmicRank    String    @default("Novice")
  badges        String[]  @default([])
  promotions    Promotion[]
  stars         Star[]
  transactions  Transaction[]
  password      String
  bio           String?
  username      String    @unique
  comments      Comment[]
  wallet        Wallet?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  verified      Boolean   @default(false)
  banned        Boolean   @default(false)
  publicProfile Boolean   @default(true)
  allowDMs       Boolean   @default(true)
  allowTagging   Boolean   @default(true)
  flagged        Boolean   @default(false)
  rank           String?
  notifications Notification[]
}

model Promotion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  imageUrl       String
  authorId       String   @db.ObjectId
  author         User     @relation(fields: [authorId], references: [id])
  verse          String
  starCount      Int      @default(0)
  commentCount   Int      @default(0)
  viewCount      Int      @default(0)
  boostLevel     Int      @default(0)
  boostMultiplier Float   @default(1.0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  stars          Star[]
  comments       Comment[]
  content        String
  mediaUrl       String?
  verses         String[]
  category       String?
  boosted        Boolean   @default(false)
  analytics      Analytics?
  draft          Boolean   @default(false)
  scheduledFor   DateTime?
  published      Boolean   @default(true)
  views          Int        @default(0)
  clicks         Int        @default(0)
  boostedAt      DateTime?
  verseId        String?
  verse          Verse?     @relation(fields: [verseId], references: [id])
  location       Location?
  locationViews  Json?
  locationClicks Json?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  postId    String   @db.ObjectId
  post      Promotion     @relation(fields: [postId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Wallet {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @unique @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  balance Int    @default(0)
  history Json[]
}

model Analytics {
  postId String @id @map("_id") @db.ObjectId
  post   Promotion   @relation(fields: [postId], references: [id])
  views  Int    @default(0)
  clicks Int    @default(0)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  type      String
  actorId   String   @db.ObjectId
  promotionId String?  @db.ObjectId
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Star {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  promotionId  String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  promotion    Promotion  @relation(fields: [promotionId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([userId, promotionId])
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  type        String   // DEPOSIT, WITHDRAW, BOOST, etc.
  description String
  createdAt   DateTime @default(now())
}

model Location {
  id           String     @id @default(cuid())
  latitude     Float
  longitude    Float
  promotionId  String     @unique
  promotion    Promotion  @relation(fields: [promotionId], references: [id])
  createdAt    DateTime   @default(now())
}

model PromotionAnalytics {
  id              String   @id @default(cuid())
  promotionId     String   @unique
  promotion       Promotion @relation(fields: [promotionId], references: [id])
  verseViews      Json     // Map of verse IDs to view counts
  verseClicks     Json     // Map of verse IDs to click counts
  locationViews   Json     // Map of location coordinates to view counts
  locationClicks  Json     // Map of location coordinates to click counts
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Verse {
  id          String       @id @default(cuid())
  name        String
  description String?
  promotions  Promotion[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
